///cube_march(v_buff, v_format, p0, p1, p2, p3, p4, p5, p6, p7, x, y, z, size)

//value of the cubes points (0 or 1)
p0 = argument2;
p1 = argument3;
p2 = argument4;
p3 = argument5;
p4 = argument6;
p5 = argument7;
p6 = argument8;
p7 = argument9;

//convert 8 variables (binary) into one decimal number
value = p0 | (p1 << 1) | (p2 << 2) | (p3 << 3) | (p4 << 4) | (p5 << 5) | (p6 << 6) | (p7 << 7);

//position of the cube
xx = argument10;
yy = argument11;
zz = argument12;

//lenght of one of the cubes edges
size = argument13;

for(i=0; i<16; i++){
    //get the combination from the triTable
    comb = ds_grid_get(global.triTable, i, value);
    
    //add a vertex to the vertexbuffer depending on the combination
    switch(comb){
        case 0 : add_vertex(argument0, argument1, xx+size/2, yy, zz);             break;
        case 1 : add_vertex(argument0, argument1, xx+size, yy+size/2, zz);        break;
        case 2 : add_vertex(argument0, argument1, xx+size/2, yy+size, zz);        break;
        case 3 : add_vertex(argument0, argument1, xx, yy+size/2, zz);             break;
        case 4 : add_vertex(argument0, argument1, xx+size/2, yy, zz+size);        break;
        case 5 : add_vertex(argument0, argument1, xx+size, yy+size/2, zz+size);   break;
        case 6 : add_vertex(argument0, argument1, xx+size/2, yy+size, zz+size);   break;
        case 7 : add_vertex(argument0, argument1, xx, yy+size/2, zz+size);        break; 
        case 8 : add_vertex(argument0, argument1, xx, yy, zz+size/2);             break; 
        case 9 : add_vertex(argument0, argument1, xx+size, yy, zz+size/2);        break; 
        case 10: add_vertex(argument0, argument1, xx+size, yy+size, zz+size/2);   break; 
        case 11: add_vertex(argument0, argument1, xx, yy+size, zz+size/2);        break; 
    }
}
